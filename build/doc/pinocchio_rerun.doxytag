<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>data_types.hpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>data__types_8hpp.html</filename>
    <namespace>pinrerun</namespace>
    <member kind="typedef">
      <type>Eigen::Ref&lt; VectorXd &gt;</type>
      <name>VectorRef</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a92c5cfa83e36c2e02e6131170eba549b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const VectorXd &gt;</type>
      <name>ConstVectorRef</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>aef1906a72922dec37e7cd3f86926eefa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigen_adapters.hpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>eigen__adapters_8hpp.html</filename>
    <class kind="struct">rerun::CollectionAdapter&lt; rerun::Position3D, std::vector&lt; Eigen::Vector3f &gt; &gt;</class>
    <class kind="struct">rerun::CollectionAdapter&lt; rerun::Vector3D, std::vector&lt; Eigen::Vector3f &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>load_mesh.cpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>load__mesh_8cpp.html</filename>
    <includes id="eigen__adapters_8hpp" name="eigen_adapters.hpp" local="yes" imported="no">eigen_adapters.hpp</includes>
    <includes id="load__mesh_8hpp" name="load_mesh.hpp" local="yes" imported="no">load_mesh.hpp</includes>
    <namespace>pinrerun</namespace>
    <namespace>pinrerun::internal</namespace>
    <member kind="function">
      <type>uint</type>
      <name>buildMesh_impl</name>
      <anchorfile>namespacepinrerun_1_1internal.html</anchorfile>
      <anchor>af34c432f3b5edb2a2db61519e1706e41</anchor>
      <arglist>(const aiScene *scene, const aiNode *node, uint vtxOffset, MeshDescription &amp;mesh, Vector3f scale, Vector4f color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMesh</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a909e0ade11b53f6a4f3c19d383c6dea3</anchor>
      <arglist>(const aiScene *scene, uint vtxOffset, MeshDescription &amp;mesh, Vector3f scale, Vector4f color)</arglist>
    </member>
    <member kind="function">
      <type>MeshDescription</type>
      <name>loadMesh</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a448445bba24887ee3e732b96b2f9b144</anchor>
      <arglist>(const std::string &amp;meshPath, Vector3f scale=Vector3f::Ones(), Vector4f color=Vector4f::Ones())</arglist>
    </member>
    <member kind="function">
      <type>rerun::archetypes::Mesh3D</type>
      <name>meshDescriptionToRerun</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>ae0b2a7c5af7a5fed6a9abafa990d41cd</anchor>
      <arglist>(MeshDescription &amp;&amp;mesh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>load_mesh.hpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>load__mesh_8hpp.html</filename>
    <includes id="data__types_8hpp" name="data_types.hpp" local="yes" imported="no">data_types.hpp</includes>
    <class kind="struct">pinrerun::MeshDescription</class>
    <namespace>pinrerun</namespace>
    <member kind="define">
      <type>#define</type>
      <name>COLOR_FLOAT_TO_INT</name>
      <anchorfile>load__mesh_8hpp.html</anchorfile>
      <anchor>a7747b8bf64fc833cc7e4b043201604d8</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTEL_RGBA</name>
      <anchorfile>load__mesh_8hpp.html</anchorfile>
      <anchor>ac17c091da5a1cfaa789e3b6ebab0957e</anchor>
      <arglist>(r, g, b, a)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; uint32_t, 3, 1 &gt;</type>
      <name>Vector3u</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>abb9ee2ba4235deea8e420bcb16e40f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMesh</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a909e0ade11b53f6a4f3c19d383c6dea3</anchor>
      <arglist>(const aiScene *scene, uint vtxOffset, MeshDescription &amp;mesh, Vector3f scale, Vector4f color)</arglist>
    </member>
    <member kind="function">
      <type>MeshDescription</type>
      <name>loadMesh</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a448445bba24887ee3e732b96b2f9b144</anchor>
      <arglist>(const std::string &amp;meshPath, Vector3f scale=Vector3f::Ones(), Vector4f color=Vector4f::Ones())</arglist>
    </member>
    <member kind="function">
      <type>rerun::archetypes::Mesh3D</type>
      <name>meshDescriptionToRerun</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>ae0b2a7c5af7a5fed6a9abafa990d41cd</anchor>
      <arglist>(MeshDescription &amp;&amp;mesh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pinocchio.cpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>pinocchio_8cpp.html</filename>
    <includes id="pinocchio_8hpp" name="pinocchio.hpp" local="yes" imported="no">./pinocchio.hpp</includes>
    <includes id="load__mesh_8hpp" name="load_mesh.hpp" local="yes" imported="no">./load_mesh.hpp</includes>
    <namespace>pinrerun</namespace>
    <member kind="function">
      <type>bool</type>
      <name>loadPinocchioGeometry</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>ac5fe3b304aab5097717c39e63f1c2fd2</anchor>
      <arglist>(const pinocchio::GeometryObject &amp;obj, const rerun::RecordingStream &amp;rr, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPinocchioModel</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>aae7da1ba455cce1c2e95aa3235d65613</anchor>
      <arglist>(const pinocchio::GeometryModel &amp;geomModel, const rerun::RecordingStream &amp;rr, const std::string &amp;prefix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pinocchio.hpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>pinocchio_8hpp.html</filename>
    <includes id="eigen__adapters_8hpp" name="eigen_adapters.hpp" local="yes" imported="no">eigen_adapters.hpp</includes>
    <includes id="data__types_8hpp" name="data_types.hpp" local="yes" imported="no">data_types.hpp</includes>
    <namespace>pinrerun</namespace>
    <member kind="function">
      <type>fs::path</type>
      <name>getEntityPath</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a664dafb5068ace7d15e249473315a31d</anchor>
      <arglist>(const pinocchio::GeometryObject &amp;gobj, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadPinocchioGeometry</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>ac5fe3b304aab5097717c39e63f1c2fd2</anchor>
      <arglist>(const pinocchio::GeometryObject &amp;obj, const rerun::RecordingStream &amp;rr, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPinocchioModel</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>aae7da1ba455cce1c2e95aa3235d65613</anchor>
      <arglist>(const pinocchio::GeometryModel &amp;geomModel, const rerun::RecordingStream &amp;rr, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>eigenStdVecCast</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>abca95470faef5b3e094a68797ff48575</anchor>
      <arglist>(const vector&lt; Eigen::Vector3d &gt; &amp;container)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pinocchio_rerun.hpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>pinocchio__rerun_8hpp.html</filename>
    <includes id="rerun__visualizer_8hpp" name="rerun_visualizer.hpp" local="yes" imported="no">rerun_visualizer.hpp</includes>
    <namespace>pinrerun</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>printVersion</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a9c3acdceccb7f9d07048611c5f837871</anchor>
      <arglist>(const char *delimiter=&quot;.&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rerun_visualizer.cpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>rerun__visualizer_8cpp.html</filename>
    <includes id="rerun__visualizer_8hpp" name="rerun_visualizer.hpp" local="yes" imported="no">rerun_visualizer.hpp</includes>
    <namespace>pinrerun</namespace>
  </compound>
  <compound kind="file">
    <name>rerun_visualizer.hpp</name>
    <path>/local/usr/ldematteis/Repositories/Software_Perso/pinocchio-rerun/src/</path>
    <filename>rerun__visualizer_8hpp.html</filename>
    <includes id="pinocchio_8hpp" name="pinocchio.hpp" local="yes" imported="no">pinocchio.hpp</includes>
    <class kind="class">pinrerun::RerunVisualizer</class>
    <namespace>pinrerun</namespace>
    <member kind="typedef">
      <type>pinocchio_visualizers::BaseVisualizer&lt; double &gt;</type>
      <name>BaseVisualizer</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a1cf58f02803ddf2b0ba39e27768fbd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>pinSE3toRerun</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a9d5dec96521eb40b744a7af474c12b27</anchor>
      <arglist>(const pinocchio::SE3Tpl&lt; Scalar, Eigen::ColMajor &gt; &amp;tr_)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rerun::CollectionAdapter&lt; rerun::Position3D, std::vector&lt; Eigen::Vector3f &gt; &gt;</name>
    <filename>structrerun_1_1CollectionAdapter_3_01rerun_1_1Position3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Collection&lt; rerun::Position3D &gt;</type>
      <name>collection_t</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Position3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>a3ca092a111e13cb2f382d688d8a959a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Eigen::Vector3f &gt;</type>
      <name>vec_t</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Position3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>a35bc2ca4ff6af71f94afa225b1e4fa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>collection_t</type>
      <name>operator()</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Position3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>a0925fe40be807a5407b9a9cc8994a290</anchor>
      <arglist>(const vec_t &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>collection_t</type>
      <name>operator()</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Position3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>a4c69e9abfd94b733e8296e7de8daf416</anchor>
      <arglist>(vec_t &amp;&amp;container)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rerun::CollectionAdapter&lt; rerun::Vector3D, std::vector&lt; Eigen::Vector3f &gt; &gt;</name>
    <filename>structrerun_1_1CollectionAdapter_3_01rerun_1_1Vector3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Collection&lt; rerun::Vector3D &gt;</type>
      <name>collection_t</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Vector3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>a14999023e1f5e6a57506d0ae42bf8415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Eigen::Vector3f &gt;</type>
      <name>vec_t</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Vector3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>aa0b7cc539382911c7a1c562e6c7d2385</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>collection_t</type>
      <name>operator()</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Vector3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>aab9244e429bbbbc6965ba9aee42d99b1</anchor>
      <arglist>(const vec_t &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>collection_t</type>
      <name>operator()</name>
      <anchorfile>structrerun_1_1CollectionAdapter_3_01rerun_1_1Vector3D_00_01std_1_1vector_3_01Eigen_1_1Vector3f_01_4_01_4.html</anchorfile>
      <anchor>a5b0acbf1f3dae52db1e621d1eea8ff9d</anchor>
      <arglist>(vec_t &amp;&amp;container)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pinrerun::MeshDescription</name>
    <filename>structpinrerun_1_1MeshDescription.html</filename>
    <member kind="variable">
      <type>vector&lt; Vector3f &gt;</type>
      <name>vertices</name>
      <anchorfile>structpinrerun_1_1MeshDescription.html</anchorfile>
      <anchor>a7b16cc9dbdd6d9a9548196ca2aa9867b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Vector3f &gt;</type>
      <name>normals</name>
      <anchorfile>structpinrerun_1_1MeshDescription.html</anchorfile>
      <anchor>a3124feff9da9626e2995e11fca70efb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Vector3u &gt;</type>
      <name>faceTriangles</name>
      <anchorfile>structpinrerun_1_1MeshDescription.html</anchorfile>
      <anchor>a4917839f9d901da32b451c6a6f5ed55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; uint32_t &gt;</type>
      <name>colors</name>
      <anchorfile>structpinrerun_1_1MeshDescription.html</anchorfile>
      <anchor>a8eb6a02a346968c07f43f5ce37422524</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pinrerun::RerunVisualizer</name>
    <filename>classpinrerun_1_1RerunVisualizer.html</filename>
    <member kind="function">
      <type></type>
      <name>RerunVisualizer</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a4220152d847759d1d091da5d88481392</anchor>
      <arglist>(const pinocchio::Model &amp;model, const pinocchio::GeometryModel &amp;geomModel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadViewerModel</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a4236befbfd27d3059731e1ae6a2eb5f3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>prefix</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a37d5591bb4fb9973fbdbd1b66192489f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>visualPrefix</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a53313177c067589f53e78f3cf4ec9a24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFrameVelocities</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a139faf31cdf647f3e6e4a06f92aa15b8</anchor>
      <arglist>(const vector&lt; FrameIndex &gt; &amp;frame_ids)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a90b4a1c8e7ac2657c460daa499e3f465</anchor>
      <arglist>(const vector&lt; ConstVectorRef &gt; &amp;qs, double dt) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>ab0d7634e3471378f70afd3a1519b5290</anchor>
      <arglist>(const vector&lt; ConstVectorRef &gt; &amp;qs, double dt, const std::string &amp;timeline)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchTimeline</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a6f45ff2769d5e51665321bfeb6a44946</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableTimeline</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a4cbac770a74b2aa95029b755d86d47f9</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialized</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>ab4517547f635597bb6ceeab48b5401b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>rerun::RecordingStream</type>
      <name>stream</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a9b52ad27fc3a44a96b76bfaafd609818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>displayImpl</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>ae12cd442b1d0aa95f9b2671f643695c7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a600361bad1a934ede6461d5c0bad210d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_initialized</name>
      <anchorfile>classpinrerun_1_1RerunVisualizer.html</anchorfile>
      <anchor>a7c582eaee673a4e421f3d440c1a1db56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pinrerun</name>
    <filename>namespacepinrerun.html</filename>
    <namespace>pinrerun::internal</namespace>
    <class kind="struct">pinrerun::MeshDescription</class>
    <class kind="class">pinrerun::RerunVisualizer</class>
    <member kind="typedef">
      <type>Eigen::Ref&lt; VectorXd &gt;</type>
      <name>VectorRef</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a92c5cfa83e36c2e02e6131170eba549b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const VectorXd &gt;</type>
      <name>ConstVectorRef</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>aef1906a72922dec37e7cd3f86926eefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; uint32_t, 3, 1 &gt;</type>
      <name>Vector3u</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>abb9ee2ba4235deea8e420bcb16e40f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio_visualizers::BaseVisualizer&lt; double &gt;</type>
      <name>BaseVisualizer</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a1cf58f02803ddf2b0ba39e27768fbd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMesh</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a909e0ade11b53f6a4f3c19d383c6dea3</anchor>
      <arglist>(const aiScene *scene, uint vtxOffset, MeshDescription &amp;mesh, Vector3f scale, Vector4f color)</arglist>
    </member>
    <member kind="function">
      <type>MeshDescription</type>
      <name>loadMesh</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a448445bba24887ee3e732b96b2f9b144</anchor>
      <arglist>(const std::string &amp;meshPath, Vector3f scale=Vector3f::Ones(), Vector4f color=Vector4f::Ones())</arglist>
    </member>
    <member kind="function">
      <type>rerun::archetypes::Mesh3D</type>
      <name>meshDescriptionToRerun</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>ae0b2a7c5af7a5fed6a9abafa990d41cd</anchor>
      <arglist>(MeshDescription &amp;&amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadPinocchioGeometry</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>ac5fe3b304aab5097717c39e63f1c2fd2</anchor>
      <arglist>(const pinocchio::GeometryObject &amp;obj, const rerun::RecordingStream &amp;rr, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPinocchioModel</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>aae7da1ba455cce1c2e95aa3235d65613</anchor>
      <arglist>(const pinocchio::GeometryModel &amp;geomModel, const rerun::RecordingStream &amp;rr, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getEntityPath</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a664dafb5068ace7d15e249473315a31d</anchor>
      <arglist>(const pinocchio::GeometryObject &amp;gobj, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>eigenStdVecCast</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>abca95470faef5b3e094a68797ff48575</anchor>
      <arglist>(const vector&lt; Eigen::Vector3d &gt; &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printVersion</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a9c3acdceccb7f9d07048611c5f837871</anchor>
      <arglist>(const char *delimiter=&quot;.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>pinSE3toRerun</name>
      <anchorfile>namespacepinrerun.html</anchorfile>
      <anchor>a9d5dec96521eb40b744a7af474c12b27</anchor>
      <arglist>(const pinocchio::SE3Tpl&lt; Scalar, Eigen::ColMajor &gt; &amp;tr_)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pinrerun::internal</name>
    <filename>namespacepinrerun_1_1internal.html</filename>
    <member kind="function">
      <type>uint</type>
      <name>buildMesh_impl</name>
      <anchorfile>namespacepinrerun_1_1internal.html</anchorfile>
      <anchor>af34c432f3b5edb2a2db61519e1706e41</anchor>
      <arglist>(const aiScene *scene, const aiNode *node, uint vtxOffset, MeshDescription &amp;mesh, Vector3f scale, Vector4f color)</arglist>
    </member>
  </compound>
</tagfile>
